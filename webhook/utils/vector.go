package utils

import (
	"context"
	"fmt"
	"io"
	"line-chatbot-golang-langchain/models"
	"log"
	"net/http"
	"os"
	"strings"
	"time"

	"github.com/joho/godotenv"
	"github.com/tmc/langchaingo/documentloaders"
	"github.com/tmc/langchaingo/embeddings/huggingface"
	"github.com/tmc/langchaingo/schema"
	"github.com/tmc/langchaingo/textsplitter"
	"github.com/tmc/langchaingo/vectorstores/mongovector"
	"go.mongodb.org/mongo-driver/v2/bson"
	"go.mongodb.org/mongo-driver/v2/mongo"
	"go.mongodb.org/mongo-driver/v2/mongo/options"
)

func InsertVectors() {
	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()

	log.Println("üîó Connecting to MongoDB...")
	client, err := mongo.Connect(options.Client().ApplyURI(os.Getenv("MONGO_URI")))
	if err != nil {
		log.Fatal("‚ùå Mongo connect error:", err)
	}
	defer func() {
		log.Println("üîå Disconnecting MongoDB...")
		client.Disconnect(ctx)
	}()

	fmt.Println("Key:", os.Getenv("HUGGINGFACEHUB_API_TOKEN"))

	db := client.Database("developer")
	collection := db.Collection("disc_embeddings")

	// ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏ü‡∏•‡πå
	filename := "landing-page.html"
	DownloadReport(filename)

	log.Println("üìÑ Processing HTML file into chunks...")
	docs := ProcessFile(filename)

	// ‡πÇ‡∏´‡∏•‡∏î environment variables (.env)
	if err := godotenv.Load(); err != nil {
		log.Printf("‚ùå .env file not found")
		return
	}

	log.Println("üß† Initializing embedding model (HuggingFace)...")
	embedder, err := huggingface.NewHuggingface(
		huggingface.WithModel("sentence-transformers/all-mpnet-base-v2"),
		huggingface.WithTask("feature-extraction"))
	if err != nil {
		log.Printf("‚ùå Failed to create an embedder: %v", err)
		return
	}

	// ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° MongoDB vector store
	store := mongovector.New(collection, embedder, mongovector.WithPath("embedding"))

	log.Println("üì¶ Inserting documents into vector store (MongoDB Atlas)...")
	result, err := store.AddDocuments(context.Background(), docs)
	if err != nil {
		log.Printf("‚ùå Failed to insert documents: %v", err)
		return
	}
	log.Printf("‚úÖ Successfully inserted %v documents into Atlas\n", len(result))

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á vector index ‡∏î‡πâ‡∏ß‡∏¢ Go SDK
	err = CreateVectorIndexWithSDK(collection)
	if err != nil {
		log.Println("‚ùå Failed to create Atlas vector index:", err)
	} else {
		log.Println("‚úÖ Vector Index created or already exists")
	}
}

func CreateVectorIndexWithSDK(coll *mongo.Collection) error {
	ctx := context.Background()
	indexName := "vector_index"

	opts := options.SearchIndexes().
		SetName(indexName).
		SetType("vectorSearch")

	// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î schema ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö vector index
	indexModel := mongo.SearchIndexModel{
		Definition: models.VectorDefinition{
			Fields: []models.VectorDefinitionField{{
				Type:          "vector",
				Path:          "embedding",
				NumDimensions: 768,
				Similarity:    "cosine",
			}},
		},
		Options: opts,
	}

	log.Println("‚öôÔ∏è Creating Atlas vector index via Go SDK...")
	searchIndexName, err := coll.SearchIndexes().CreateOne(ctx, indexModel)
	if err != nil {
		return err
	}

	log.Println("üîç Polling to confirm successful index creation...")
	searchIndexes := coll.SearchIndexes()
	var doc bson.Raw
	for doc == nil {
		cursor, err := searchIndexes.List(ctx, options.SearchIndexes().SetName(searchIndexName))
		if err != nil {
			log.Printf("‚ùå Failed to list search indexes: %v", err)
		}
		if !cursor.Next(ctx) {
			break
		}
		name := cursor.Current.Lookup("name").StringValue()
		queryable := cursor.Current.Lookup("queryable").Boolean()
		if name == searchIndexName && queryable {
			doc = cursor.Current
		} else {
			time.Sleep(5 * time.Second)
		}
	}
	log.Println("‚úÖ Index confirmed: " + searchIndexName)
	return nil
}

func DownloadReport(filename string) {
	// ‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏°
	if _, err := os.Stat(filename); err == nil {
		log.Println("üìÅ File already exists:", filename)
		return
	}

	const url = "https://www.baseplayhouse.co/blog/what-is-disc"
	log.Println("üåê Downloading", url, "‚Üí", filename)

	resp, err := http.Get(url)
	if err != nil {
		log.Fatalf("‚ùå Failed to download the report: %v", err)
	}
	defer resp.Body.Close()

	f, err := os.Create(filename)
	if err != nil {
		log.Fatalf("‚ùå Failed to create file: %v", err)
	}
	defer f.Close()

	_, err = io.Copy(f, resp.Body)
	if err != nil {
		log.Fatalf("‚ùå Failed to write file: %v", err)
	}

	log.Println("‚úÖ File downloaded successfully:", filename)
}

func ProcessFile(filename string) []schema.Document {
	ctx := context.Background()

	log.Println("üìÇ Opening HTML file:", filename)
	f, err := os.Open(filename)
	if err != nil {
		log.Fatalf("‚ùå Failed to open file: %v", err)
	}
	defer f.Close()

	html := documentloaders.NewHTML(f)
	split := textsplitter.NewRecursiveCharacter()
	split.ChunkSize = 400
	split.ChunkOverlap = 20

	log.Println("‚úÇÔ∏è Splitting content into chunks...")
	docs, err := html.LoadAndSplit(ctx, split)
	if err != nil {
		log.Fatalf("‚ùå Failed to chunk HTML: %v", err)
	}
	log.Printf("‚úÖ Successfully chunked into %v documents.\n", len(docs))
	return docs
}

func GetQueryResults(query string) []schema.Document {
	coll := client.Database("developer").Collection("disc_embeddings")

	log.Println("üîç Performing vector similarity search for query:", query)
	embedder, err := huggingface.NewHuggingface(
		huggingface.WithModel("sentence-transformers/all-mpnet-base-v2"),
		huggingface.WithTask("feature-extraction"))
	if err != nil {
		log.Fatalf("‚ùå Failed to create embedder: %v", err)
	}

	store := mongovector.New(coll, embedder, mongovector.WithPath("embedding"))
	docs, err := store.SimilaritySearch(context.Background(), query, 5)
	if err != nil {
		log.Fatalf("‚ùå Similarity search failed: %v", err)
	}

	log.Printf("‚úÖ Found %d similar documents.\n", len(docs))
	return docs
}

func VectorSearchQueryGemini(userText string, checkJSON bool) (string, error) {
	documents := GetQueryResults(userText)

	var textDocuments strings.Builder
	for _, doc := range documents {
		textDocuments.WriteString(doc.PageContent)
		textDocuments.WriteString("\n\n")
	}

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á prompt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Gemini
	prompt := fmt.Sprintf(`
	‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô DISC Model ‡∏ã‡∏∂‡πà‡∏á‡πÅ‡∏ö‡πà‡∏á‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô 4 ‡∏Å‡∏•‡∏∏‡πà‡∏° ‡∏Ñ‡∏∑‡∏≠ D (Dominance), I (Influence), S (Steadiness), C (Conscientiousness)
	‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ:
	"%s"

	‡πÅ‡∏•‡∏∞‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• DISC ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á:
	%s

	‡∏ä‡πà‡∏ß‡∏¢‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡πà‡∏≤‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ô‡∏µ‡πâ‡∏ô‡πà‡∏≤‡∏à‡∏∞‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö DISC ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÉ‡∏î‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏≠‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON:
	{
	"model": "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó DISC ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°",
	"description": "‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ô‡∏µ‡πâ"
	}
`, userText, textDocuments.String())

	// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API Gemini
	answer, err := AskGemini(prompt)
	if err != nil {
		log.Printf("‚ùå Gemini error: %v", err)
		return "", err
	}

	// ‡∏•‡πâ‡∏≤‡∏á markdown JSON ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
	if checkJSON {
		answer = strings.ReplaceAll(answer, "```json", "")
		answer = strings.ReplaceAll(answer, "```", "")
		answer = strings.TrimSpace(answer)
	}

	return answer, nil
}

func GetAllUsersInGroup(groupID string) ([]bson.M, error) {
	filter := bson.M{"groupId": groupID}
	cursor, err := groupCol.Find(context.Background(), filter)
	if err != nil {
		return nil, err
	}
	var results []bson.M
	if err := cursor.All(context.Background(), &results); err != nil {
		return nil, err
	}
	return results, nil
}
